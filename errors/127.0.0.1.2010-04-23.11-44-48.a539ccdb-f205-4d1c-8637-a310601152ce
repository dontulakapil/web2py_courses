(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/chinna/Desktop/web2py/applications/courses/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n\n#def index():\n #   """\n  #  example action using the internationalization operator T and flash\n   # rendered by views/default/index.html or views/generic.html\n    #"""\n    #response.flash = T(\'Welcome to web2py\')\n    #return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\ndef index():\n    courses=db().select(db.courses.ALL)\n    return dict(courses=courses)\n\ndef insert():\n    form=SQLFORM(db.courses)\n    if form.accepts(request.vars,session):\n        response.flash = \'course is posted\'\n    return(dict(form=form))\ndef show():\n    k=request.args(0)\n    courses=db(db.courses.courses_id==k).select()\n    ta=db(db.TA.courses_id==courses[0].id).select()\n    asignments=db(db.assignment.courses_id==courses[0].id).select()\n    return dict(courses=courses,ta=ta,asignments=asignments)\ndef delete():\n    k=request.args(0)\n    crud.delete(db.courses,k,next=URL(r=request,f="index"))\n    return\n@auth.requires_membership(\'TA,s\')\ndef addas():\n    form=SQLFORM(db.assignment)\n    if form.accepts(request.vars,session):\n        response.flash = \'asignment posted\'\n    return(dict(form=form))\n\nresponse._vars=response._caller(insert)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/chinna/Desktop/web2py/gluon/restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "/home/chinna/Desktop/web2py/applications/courses/controllers/default.py", line 81, in <module>\n  File "/home/chinna/Desktop/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/chinna/Desktop/web2py/applications/courses/controllers/default.py", line 61, in insert\n    if form.accepts(request.vars,session):\n  File "/home/chinna/Desktop/web2py/gluon/sqlhtml.py", line 839, in accepts\n    onvalidation,\n  File "/home/chinna/Desktop/web2py/gluon/html.py", line 1310, in accepts\n    status = self._traverse(status)\n  File "/home/chinna/Desktop/web2py/gluon/html.py", line 452, in _traverse\n    newstatus = c._traverse(status) and newstatus\n  File "/home/chinna/Desktop/web2py/gluon/html.py", line 452, in _traverse\n    newstatus = c._traverse(status) and newstatus\n  File "/home/chinna/Desktop/web2py/gluon/html.py", line 452, in _traverse\n    newstatus = c._traverse(status) and newstatus\n  File "/home/chinna/Desktop/web2py/gluon/html.py", line 452, in _traverse\n    newstatus = c._traverse(status) and newstatus\n  File "/home/chinna/Desktop/web2py/gluon/html.py", line 459, in _traverse\n    newstatus = self._validate()\n  File "/home/chinna/Desktop/web2py/gluon/html.py", line 1117, in _validate\n    (value, errors) = validator(value)\n  File "/home/chinna/Desktop/web2py/gluon/validators.py", line 448, in __call__\n    rows = self.dbset(field == value).select(limitby=(0, 1))\n  File "/home/chinna/Desktop/web2py/gluon/sql.py", line 2424, in __eq__\n    return Query(self, \'=\', value)\n  File "/home/chinna/Desktop/web2py/gluon/sql.py", line 2839, in __init__\n    right = sql_represent(right, left.type, left._db._dbname, left._db._db_codec)\n  File "/home/chinna/Desktop/web2py/gluon/sql.py", line 502, in sql_represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'ds1\'\n'
p8
s.