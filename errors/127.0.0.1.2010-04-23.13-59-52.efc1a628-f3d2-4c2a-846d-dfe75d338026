(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/chinna/Desktop/web2py/applications/courses/models/db.py'
p4
sS'code'
p5
S"# -*- coding: utf-8 -*- \n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL('gae')                           # connect to Google BigTable\n    session.connect(request, response, db=db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db=MEMDB(Client())\nelse:                                         # else use a normal relational database\n    db = DAL('sqlite://storage.sqlite')       # if not, use SQLite or other DB\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## comment/uncomment as needed\n\nfrom gluon.tools import *\nauth=Auth(globals(),db)                      # authentication/authorization\nauth.settings.hmac_key='sha512:e1c5f5b9-4c15-4cfc-b50f-802054f6c6d9'\nauth.define_tables()                         # creates all needed tables\ncrud=Crud(globals(),db)                      # for CRUD helpers using auth\nservice=Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\n\n# crud.settings.auth=auth                      # enforces authorization on crud\n# mail=Mail()                                  # mailer\n# mail.settings.server='smtp.gmail.com:587'    # your SMTP server\n# mail.settings.sender='you@gmail.com'         # your email\n# mail.settings.login='username:password'      # your credentials or None\n# auth.settings.mailer=mail                    # for user email verification\n# auth.settings.registration_requires_verification = True\n# auth.settings.registration_requires_approval = True\n# auth.messages.verify_email = 'Click on the link http://'+request.env.http_host+URL(r=request,c='default',f='user',args=['verify_email'])+'/%(key)s to verify your email'\n# auth.settings.reset_password_requires_verification = True\n# auth.messages.reset_password = 'Click on the link http://'+request.env.http_host+URL(r=request,c='default',f='user',args=['reset_password'])+'/%(key)s to reset your password'\n## more options discussed in gluon/tools.py\n#########################################################################\n\n#########################################################################\n## Define your tables below, for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\ndb.define_table('courses',\n                    Field('course','string'),                \n                    Field('courses_id','string'),\n                    Field('credits','integer'),\n                    Field('faculty','string'))\ndb.courses.course.requires = IS_NOT_EMPTY()\ndb.courses.courses_id.requires = IS_NOT_EMPTY()\ndb.courses.credits.requires = IS_NOT_EMPTY()\ndb.courses.faculty.requires = IS_NOT_EMPTY()\ndb.define_table('TA',              \n                    Field('courses_id',db.courses),\n                    Field('ta_name','string'))\ndb.TA.courses_id.requires = IS_IN_DB(db,'courses.id','courses.courses_id',unique='True')\ndb.TA.ta_name.requires = IS_NOT_EMPTY()\ndb.define_table('assignment',              \n                    Field('courses_id',db.courses),\n                    Field('assignment_name','string'),\n                    Field('assignment_discription','text'))\ndb.assignment.assignment_name.requires = IS_NOT_EMPTY()\ndb.assignment.courses_id.requires = IS_IN_DB(db,'courses.id','courses.courses_id')\ndb.courses.id.writable = db.courses.id.readable = False\ndb.TA.id.writable = db.TA.id.readable = False\ndb.assignment.id.writable = db.assignment.id.readable = False\ndb.assignment.courses_id.writable = db.assignment.courses_id.readable = False\n#db.courses.courses_id.requires = IS_NOT_IN_DB(db,'courses.id','courses.courses_id')\n"
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/chinna/Desktop/web2py/gluon/restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "/home/chinna/Desktop/web2py/applications/courses/models/db.py", line 77, in <module>\n    db.TA.courses_id.requires = IS_IN_DB(db,\'courses.id\',\'courses.courses_id\',unique=\'True\')\nTypeError: __init__() got an unexpected keyword argument \'unique\'\n'
p8
s.